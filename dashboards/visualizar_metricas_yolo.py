# dashboards/visualizar_metricas_yolo.py

import streamlit as st
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import cv2
import base64
from pathlib import Path
from PIL import Image
from io import BytesIO

# ‚öôÔ∏è Configura√ß√£o da p√°gina
st.set_page_config(page_title="M√©tricas YOLOv5", layout="wide")

# üìÑ Caminho do CSV
csv_path = Path("results/yolo/metricas_yolo.csv")
crops_dir = Path("results/yolo/crops")

# ‚ùå Verifica se o arquivo existe
if not csv_path.exists():
    st.error("‚ùå Arquivo 'metricas_yolo.csv' n√£o encontrado em 'results/yolo/'.")
    st.stop()

# üìä Carrega dados
df = pd.read_csv(csv_path)

# üß≠ T√≠tulo
st.title("üìä Dashboard de M√©tricas ‚Äì YOLOv5")
st.markdown("An√°lise interativa com visualiza√ß√£o dos recortes detectados.")

# üîé Filtro por status
status_opcao = st.multiselect(
    "Filtrar por status:",
    options=df['status'].unique(),
    default=list(df['status'].unique())
)
df_filtrado = df[df['status'].isin(status_opcao)]

# üìã Tabela de m√©tricas com sele√ß√£o
st.subheader("üîç Tabela interativa")
imagem_selecionada = st.selectbox("Selecione uma imagem para ver os crops detectados:", df_filtrado['imagem'])

# üìä Gr√°fico: objetos por imagem
st.subheader("üì¶ N¬∫ de objetos detectados por imagem")
fig1, ax1 = plt.subplots(figsize=(10, 4))
sns.barplot(data=df_filtrado, x="imagem", y="objetos_detectados", ax=ax1, palette="Blues_d")
ax1.set_xticklabels(ax1.get_xticklabels(), rotation=45, ha='right')
st.pyplot(fig1)

# ‚è±Ô∏è Gr√°fico: tempo de processamento
st.subheader("‚è±Ô∏è Tempo de processamento por imagem")
fig2, ax2 = plt.subplots(figsize=(10, 4))
sns.barplot(data=df_filtrado, x="imagem", y="tempo_processamento_s", ax=ax2, palette="Oranges")
ax2.set_xticklabels(ax2.get_xticklabels(), rotation=45, ha='right')
st.pyplot(fig2)

# üîÑ Dispers√£o: objetos vs tempo
st.subheader("üîÑ Correla√ß√£o: N¬∫ de objetos x Tempo")
fig3, ax3 = plt.subplots(figsize=(6, 4))
sns.scatterplot(data=df_filtrado, x="objetos_detectados", y="tempo_processamento_s", hue="status", s=100, ax=ax3)
st.pyplot(fig3)

# ‚ö†Ô∏è Falhas
num_falhas = df[df['status'].isin(['falha', 'erro', 'erro_leitura'])].shape[0]
if num_falhas > 0:
    st.warning(f"‚ö†Ô∏è {num_falhas} imagem(ns) com falha ou erro.")

# üñºÔ∏è Exibi√ß√£o dos crops
st.subheader(f"üñºÔ∏è Recortes detectados: {imagem_selecionada}")

# üîç Busca todos os crops da imagem
prefix = Path(imagem_selecionada).stem + "_"
crops = sorted([f for f in crops_dir.glob(f"{prefix}*") if f.suffix in ['.jpg', '.jpeg', '.png']])

if not crops:
    st.info("Nenhum crop detectado ou imagem sem objetos.")
else:
    cols = st.columns(min(len(crops), 5))
    for i, crop_path in enumerate(crops):
        with cols[i % len(cols)]:
            image = Image.open(crop_path)
            st.image(image, caption=crop_path.name, use_column_width=True)
